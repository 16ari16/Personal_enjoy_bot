import logging
import random

import game
import requests
import json

from numpy import number
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã –∏ API –∫–ª—é—á–∏
BOT_TOKEN = '8046195893:AAEfNDOtX4NYFaPqnF_oEqJ8YXjUQYHg1pA'
OMDB_API_KEY = 'http://www.omdbapi.com/?i=tt3896198&apikey=1e3f1394'
TRANSLATION_API_URL = "https://api.mymemory.translated.net/get"
DOG_API_URL = "https://dog.ceo/api/breeds/image/random"
CAT_API_URL = "https://api.thecatapi.com/v1/images/search"
ADVICE_API_URL = "https://api.adviceslip.com/advice"
FACT_API_URL = "https://uselessfacts.jsph.pl/random.json?language=en"
MUSIC_API_URL = "https://api.deezer.com/chart"
OPENAI_API_KEY = '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'
UNSPLASH_API_KEY = '5qrxk0cVaix-mnYTr_auuvGumzWp2eBQlp5_ZnPAXLE'  # –í–∞—à API –∫–ª—é—á –¥–ª—è Unsplash
UNSPLASH_API_URL = 'https://api.unsplash.com/photos/random'  # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
NEWS_API_KEY = 'af446556a648456b999fe37f01943068'  # API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
QUOTABLE_API_URL = "https://api.quotable.io/random"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üî• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "1. /weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞\n"
        "2. /fact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "3. /movie [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\n"
        "4. /random - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n"
        "5. /game - –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n"
        "6. /quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "7. /joke - –®—É—Ç–∫–∞\n"
        "8. /advice - –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç\n"
        "9. /dog - –§–æ—Ç–æ —Å–æ–±–∞–∫–∏\n"
        "10. /cat - –§–æ—Ç–æ –∫–æ—Ç–∞\n"
        "11. /translate [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞\n"
        "12. /music - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏\n"
        "13. /chatgpt [–≤–æ–ø—Ä–æ—Å] - –û–±—â–µ–Ω–∏–µ —Å ChatGPT\n"
        "14. /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–ª–æ—Ö–æ\n"
        "15. /cyberpunk - –ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Ñ–æ—Ç–æ –Ω–æ—á—å—é\n"
        "16. /news - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "17. /image - –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )

# –ü–æ–≥–æ–¥–∞
async def weather(update: Update, context: CallbackContext) -> None:
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    city = " ".join(context.args)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response = requests.get(f"https://wttr.in/{city}?format=üåÄ %C\nüå° %t\nüå¨ –í–µ—Ç–µ—Ä: %w\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %h")
        if response.status_code == 200:
            weather_data = response.text
            await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n{weather_data}")
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã
async def fact(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(FACT_API_URL)
        fact_data = response.json()
        fact_message = fact_data['text']
        await update.message.reply_text(fact_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç.")

# –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
async def movie(update: Update, context: CallbackContext) -> None:
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /movie Inception")
        return
    movie_name = " ".join(context.args)
    try:
        response = requests.get(f"http://www.omdbapi.com/?t={movie_name}&apikey={OMDB_API_KEY}")
        movie_data = response.json()
        if movie_data.get("Response") == "False":
            await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            title = movie_data["Title"]
            year = movie_data["Year"]
            plot = movie_data["Plot"]
            poster = movie_data["Poster"]
            movie_message = f"–§–∏–ª—å–º: {title}\n–ì–æ–¥: {year}\n–û–ø–∏—Å–∞–Ω–∏–µ: {plot}"
            await update.message.reply_text(movie_message)
            await update.message.reply_photo(poster)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ.")

# –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
async def random_number(update: Update, context: CallbackContext) -> None:
    random_num = random.randint(1, 100)
    await update.message.reply_text(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_num}")

# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
async def game(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üéÆ –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'! –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞."
    )
    context.user_data["game_active"] = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
async def check_rps(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get("game_active"):
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rps.")
        return

    user_choice = update.message.text.lower()
    valid_choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    if user_choice not in valid_choices:
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.")
        return

    bot_choice = random.choice(valid_choices)
    await update.message.reply_text(f"ü§ñ –ú–æ–π –≤—ã–±–æ—Ä: {bot_choice.capitalize()}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    if user_choice == bot_choice:
        await update.message.reply_text("‚öñÔ∏è –ù–∏—á—å—è!")
    elif (
        (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or
        (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or
        (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å")
    ):
        await update.message.reply_text("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
    else:
        await update.message.reply_text("üò¢ –Ø –≤—ã–∏–≥—Ä–∞–ª!")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    context.user_data["game_active"] = False
    await update.message.reply_text("–î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /game.")


# –¶–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ API
async def quote(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(QUOTABLE_API_URL)
        quote_data = response.json()
        quote_message = f"–¶–∏—Ç–∞—Ç–∞: \n{quote_data['content']}\n‚Äî {quote_data['author']}"
        await update.message.reply_text(quote_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.")

# –®—É—Ç–∫–∞
async def joke(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get("https://official-joke-api.appspot.com/jokes/random")
        joke_data = response.json()
        joke_message = f"{joke_data['setup']} - {joke_data['punchline']}"
        await update.message.reply_text(joke_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.")

# –°–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ API
async def advice(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(ADVICE_API_URL)
        advice_data = response.json()
        advice_message = advice_data['slip']['advice']
        await update.message.reply_text(f"–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç: {advice_message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç.")

# –§–æ—Ç–æ —Å–æ–±–∞–∫–∏
async def dog(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(DOG_API_URL)
        dog_data = response.json()
        dog_image_url = dog_data['message']
        await update.message.reply_photo(dog_image_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏.")

# –§–æ—Ç–æ –∫–æ—Ç–∞
async def cat(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(CAT_API_URL)
        cat_data = response.json()
        cat_image_url = cat_data[0]['url']
        await update.message.reply_photo(cat_image_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∞.")

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def translate(update: Update, context: CallbackContext) -> None:
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /translate –ü—Ä–∏–≤–µ—Ç")
        return
    text_to_translate = " ".join(context.args)
    try:
        response = requests.get(f"{TRANSLATION_API_URL}?q={text_to_translate}&langpair=ru|en")
        translation_data = response.json()
        translated_text = translation_data['responseData']['translatedText']
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translated_text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.")

# –ú—É–∑—ã–∫–∞
async def music(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(MUSIC_API_URL)
        music_data = response.json()
        music_message = "\n".join([f"{track['title']} - {track['artist']['name']}" for track in music_data['data'][:5]])
        await update.message.reply_text(f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n{music_message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–∑—ã–∫–µ.")

# ChatGPT
async def chatgpt(update: Update, context: CallbackContext) -> None:
    question = " ".join(context.args)
    try:
        openai.api_key = OPENAI_API_KEY
        response = openai.Completion.create(
            model="gpt-3.5-turbo",
            prompt=question,
            max_tokens=150
        )
        chatgpt_response = response.choices[0].text.strip()
        await update.message.reply_text(chatgpt_response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å ChatGPT: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT.")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
async def support(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(ADVICE_API_URL)
        advice_data = response.json()
        advice_message = advice_data['slip']['advice']
        await update.message.reply_text(f"–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {advice_message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

# –ù–æ–≤–æ—Å—Ç–∏
async def news(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(f'https://newsapi.org/v2/top-headlines?country=ru&apiKey={NEWS_API_KEY}')
        news_data = response.json()
        articles = news_data['articles'][:5]
        news_message = "\n".join([f"{article['title']} - {article['url']}" for article in articles])
        await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç–∏:\n{news_message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")

# –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def image(update: Update, context: CallbackContext) -> None:
    try:
        response = requests.get(f'{UNSPLASH_API_URL}?client_id={UNSPLASH_API_KEY}')
        image_data = response.json()
        image_url = image_data[0]['urls']['regular']
        await update.message.reply_photo(image_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CommandHandler("fact", fact))
    application.add_handler(CommandHandler("movie", movie))
    application.add_handler(CommandHandler("random", random_number))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("quote", quote))
    application.add_handler(CommandHandler("joke", joke))
    application.add_handler(CommandHandler("advice", advice))
    application.add_handler(CommandHandler("dog", dog))
    application.add_handler(CommandHandler("cat", cat))
    application.add_handler(CommandHandler("translate", translate))
    application.add_handler(CommandHandler("music", music))
    application.add_handler(CommandHandler("chatgpt", chatgpt))
    application.add_handler(CommandHandler("support", support))
    application.add_handler(CommandHandler("news", news))
    application.add_handler(CommandHandler("image", image))

    application.run_polling()

if __name__ == "__main__":
    main()
